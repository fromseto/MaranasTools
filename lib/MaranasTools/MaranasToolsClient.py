# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class MaranasTools(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def run_optstoic(self, params, context=None):
        """
        :param params: instance of type "OptStoicParams" (compound_id
           start_compound; compound_id target_compound;) -> structure:
           parameter "model" of type "model_upa" (An X/Y/Z style reference to
           an FBA model.), parameter "reactant_stoichs" of list of type
           "Reactant_stoich" (model - the FBA model to use as a basis for
           modification start_compound - the initial compound to be used as a
           source for the pathway target_compound - the target compound to
           maximize yield for in the pathway max_steps - the maximum number
           of steps to allow in the optimized pathway - any pathway created
           that has more than this number of steps is disqualified
           use_heterologous_steps - allows adding dG_threshold - a threshold
           free energy value to further constrain the path optimization) ->
           structure: parameter "start_compound" of type "compound_id" (The
           id of a compound that exists either in the model or in the
           biochemistry.), parameter "fixed_stoich" of Double, parameter
           "product_stoichs" of list of type "Product_stoich" -> structure:
           parameter "target_compound" of type "compound_id" (The id of a
           compound that exists either in the model or in the biochemistry.),
           parameter "fixed_stoich" of Double, parameter "integer_stoich" of
           type "boolean" (A boolean - 0=false, 1=true @range (0, 1)),
           parameter "objective" of String, parameter "exclude_compound_ids"
           of type "compound_id" (The id of a compound that exists either in
           the model or in the biochemistry.), parameter
           "use_heterologous_steps" of type "boolean" (A boolean - 0=false,
           1=true @range (0, 1)), parameter "num_pathways" of Long, parameter
           "dG_threshold" of Double, parameter "workspace_name" of String
        :returns: instance of type "OptStoicOutput" (report_name - name of
           the report object that gets generated. report_ref - UPA of the
           report object that gets generated.) -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'MaranasTools.run_optstoic',
            [params], self._service_ver, context)

    def run_steadycom(self, params, context=None):
        """
        :param params: instance of type "SteadyComParams" -> structure:
           parameter "model_inputs" of list of type "ModelInput" ->
           structure: parameter "model_upa" of String, parameter "fixed_gr"
           of Double, parameter "medium_upa" of String, parameter
           "flux_output" of String, parameter "workspace_name" of String
        :returns: instance of type "SteadyComOutput" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String,
           parameter "flux_output" of String
        """
        return self._client.call_method(
            'MaranasTools.run_steadycom',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('MaranasTools.status',
                                        [], self._service_ver, context)
